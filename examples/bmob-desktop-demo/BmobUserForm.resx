<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>